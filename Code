import streamlit as st
import cv2
from PIL import Image
import numpy as np

def detect_pixelation(image, threshold=15):
    gray_image = cv2.cvtColor(np.array(image), cv2.COLOR_BGR2GRAY)
    variance_of_laplacian = cv2.Laplacian(gray_image, cv2.CV_64F).var()
    return variance_of_laplacian, variance_of_laplacian < threshold

def correct_pixelation(image, scale_factor=2):
    new_size = (image.width * scale_factor, image.height * scale_factor)
    resized_image = image.resize(new_size, Image.NEAREST)
    open_cv_image = cv2.cvtColor(np.array(resized_image), cv2.COLOR_RGB2BGR)
    corrected_image = cv2.bilateralFilter(open_cv_image, d=9, sigmaColor=75, sigmaSpace=75)
    return Image.fromarray(cv2.cvtColor(corrected_image, cv2.COLOR_BGR2RGB))

# Title with inline CSS for styling
st.markdown('<h1 style="color:#4CAF50; font-size:2.5em; font-weight:bold; text-align:center; margin-top:20px;">Pixelation Detection and Correction</h1>', unsafe_allow_html=True)
st.write("Upload an image to detect and correct pixelation")

uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])
threshold = st.slider("Set pixelation detection threshold", min_value=0, max_value=100, value=15)
scale_factor = st.slider("Set scale factor for pixelation correction", min_value=1, max_value=5, value=2)

if uploaded_file is not None:
    image = Image.open(uploaded_file)
    st.image(image, caption="Uploaded Image", use_column_width=True)
    
    variance, is_pixelated = detect_pixelation(image, threshold)
    st.markdown(f'<div style="background-color:#FFD700; padding:10px; border-radius:10px; font-size:1.1em; text-align:center; margin-bottom:20px;">Variance of Laplacian: {variance}</div>', unsafe_allow_html=True)
    
    if is_pixelated:
        st.markdown('<div style="color:#FF4500; font-weight:bold; font-size:1.2em; text-align:center; margin:20px 0;">Pixelation detected.</div>', unsafe_allow_html=True)
        corrected_image = correct_pixelation(image, scale_factor)
        st.image(corrected_image, caption="Corrected Image", use_column_width=True)
    else:
        st.markdown('<div style="color:#32CD32; font-weight:bold; font-size:1.2em; text-align:center; margin:20px 0;">No significant pixelation detected.</div>', unsafe_allow_html=True)
